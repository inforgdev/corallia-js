import{_ as e,c as t,o as n,a as o}from"./app.841dc6be.js";const f=JSON.parse('{"title":"File Content Generation","description":"","frontmatter":{},"headers":[{"level":2,"title":"genGpl","slug":"gengpl","link":"#gengpl","children":[]}],"relativePath":"api/files.md"}'),a={name:"api/files.md"},r=o('<h1 id="file-content-generation" tabindex="-1">File Content Generation <a class="header-anchor" href="#file-content-generation" aria-hidden="true">#</a></h1><h2 id="gengpl" tabindex="-1"><code>genGpl</code> <a class="header-anchor" href="#gengpl" aria-hidden="true">#</a></h2><p>This function generates a GIMP palette file with the given <code>name</code> and <code>propObj</code> as input, and an optional template <code>tmpl</code>.</p><p>The function iterates through the propObj and uses the <code>hex-rgb</code> library to convert the hex color value to RGB format and also uses <code>renderTokens</code> function to convert the propObj to json object. Then it uses the <code>tmpl</code> to format the palette entry and join all the entries with new line separator.</p><p>Parameters:</p><ul><li><strong>name</strong>: the name of the GIMP palette to be generated;</li><li><strong>propObj</strong>: an object containing properties and values to be transformed into GIMP palette entries;</li><li><strong>tmpl?</strong>: the template for the GIMP palette entry. It defaults to <code>stdTmpl</code> which is <code>{NAME} ({VALUE})</code>.</li></ul><p>Returns: a string of the GIMP palette file generated.</p>',7),i=[r];function l(s,c,d,p,h,g){return n(),t("div",null,i)}const u=e(a,[["render",l]]);export{f as __pageData,u as default};
